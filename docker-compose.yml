version: '3.8'
services:
  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./volumes/portainer-data:/data
    ports:
      - "9000:9000"
  postgres_users:
    image: postgres:14.5-alpine
    environment:
      POSTGRES_DB: users_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - "./volumes/postgres_users:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
    restart: unless-stopped
  postgres_market:
    image: postgres:14.5-alpine
    environment:
      POSTGRES_DB: market_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_password
    volumes:
      - "./volumes/postgres_users:/var/lib/postgresql/data"
    ports:
      - "5433:5433"
    restart: unless-stopped
  shared_lib:
    container_name: shared_lib
    image: shared_lib
    build: ./shared_lib
  eureka-server:
    container_name: eureka-server
    image: eurekaserverimage
    build: ./eureka-server
    ports:
      - "8761:8761"
  config-service:
    image: configserviceimage
    container_name: config-service
    build: ./config-service
    ports:
      - "8762:8762"
    environment:
      PORT: 8762
      EUREKA_ADDRESS: "eureka-server:8761"
    depends_on:
      - eureka-server
#  user-service:
#    image: userserviceimage
#    container_name: user-service
#    build: ./user-service
#    ports:
#      - "8081:8081"
#    environment:
#      PORT: 8081
#      EUREKA_ADDRESS: "eureka-server:8761"
#      CONFIG_URL: "config-service:8762"
#      POSTGRES_ADDRESS: "postgres_users:5432"
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#    depends_on:
#      - config-service
#      - postgres_users
#      - shared_lib
#  auth-service:
#    image: authserviceimage
#    container_name: auth-service
#    build: ./auth-service
#    ports:
#      - "8082:8082"
#    environment:
#      PORT: 8082
#      EUREKA_ADDRESS: "eureka-server:8761"
#      CONFIG_URL: "config-service:8762"
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 5
#    depends_on:
#      - postgres_users
#      - config-service
#      - user-service
#      - shared_lib
#  person-service:
#    image: personserviceimage
#    container_name: person-service
#    build: ./person-service
#    ports:
#      - "8083:8083"
#    environment:
#      PORT: 8083
#      EUREKA_ADDRESS: "eureka-server:8761"
#      CONFIG_URL: "config-service:8762"
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#    depends_on:
#      - config-service
#      - postgres_users
#      - shared_lib
#  content-service:
#    image: contentserviceimage
#    container_name: content-service
#    build: ./content-service
#    ports:
#      - "8084:8084"
#    environment:
#      PORT: 8084
#      EUREKA_ADDRESS: "eureka-server:8761"
#      CONFIG_URL: "config-service:8762"
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#    depends_on:
#      - config-service
#      - postgres_users
#      - shared_lib
#  card-service:
#    image: cardserviceimage
#    container_name: card-service
#    build: ./card-service
#    ports:
#      - "8085:8085"
#    environment:
#      PORT: 8085
#      EUREKA_ADDRESS: "eureka-server:8761"
#      CONFIG_URL: "config-service:8762"
#    deploy:
#      restart_policy:
#        condition: on-failure
#        max_attempts: 3
#    depends_on:
#      - config-service
#      - postgres_users
#      - shared_lib
  market-service:
    image: marketserviceimage
    container_name: market-service
    build: ./market-service
    ports:
      - "8086:8086"
    environment:
      PORT: 8086
      EUREKA_ADDRESS: "eureka-server:8761"
      CONFIG_URL: "config-service:8762"
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - config-service
      - postgres_users
      - shared_lib
  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    user: root
    ports:
      - 9090:9090
    volumes:
      - ./metrics/config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    links:
      - pushgateway:pushgateway
      - cadvisor:cadvisor
    depends_on:
      - cadvisor

  grafana:
    user: root
    build: './metrics/config/grafana'
    container_name: grafana
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    links:
      - jaeger:jaeger
    external_links:
      - "prometheus"

  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    ports:
      - 9091:9091
    expose:
      - 9091

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    hostname: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs
      - /var/run:/var/run
      - /sys:/sys
      - /var/lib/docker:/var/lib/docker

  jaeger:
    image: jaegertracing/all-in-one:1.25
    container_name: jaeger
    hostname: jaeger
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - PROMETHEUS_SERVER_URL=http://prometheus:9090
    ports:
      - 6831:6831/udp
      - 6832:6832/udp
      - 16686:16686
      - 14268:14268
    expose:
      - 16686

  elasticsearch:
    image: elasticsearch:8.5.1
    container_name: elasticsearch
    hostname: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    expose:
      - "9200"

  kibana:
    image: kibana:8.5.1
    container_name: kibana
    hostname: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      ELASTICSEARCH_URL: https://elasticsearch:9200
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  fluentd:
    build: ./fluentd
    container_name: fluentd
    hostname: fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    links:
      - "elasticsearch"
    depends_on:
      - elasticsearch

volumes:
  esdata:
    driver: local